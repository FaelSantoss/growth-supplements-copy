datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}
model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  name              String
  createdAt         DateTime  @default(now())
  orders            Order[]
  cart              Cart?
  address           Address[]
}

model Product {
  id                Int       @id @default(autoincrement())
  name              String
  description       String
  price             Float
  imageUrl          String
  stock             Int
  categoryId        Int
  category          Category  @relation(fields: [categoryId], references: [id])
  cartItems         CartItem[]
  orderItems        OrderItem[]
  createdAt         DateTime  @default(now())
}

model Category {
  id                Int       @id @default(autoincrement())
  name              String    @unique
  products          Product[]
}

model Cart {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  user              User      @relation(fields: [userId], references: [id])
  items             CartItem[]
}

model CartItem {
  id                Int       @id @default(autoincrement())
  quantity          Int
  productId         Int
  product           Product   @relation(fields: [productId], references: [id])
  cartId            Int
  cart              Cart      @relation(fields: [cartId], references: [id])
}

model Order {
  id                Int       @id @default(autoincrement())
  total             Float
  status            String
  userId            Int
  user              User      @relation(fields: [userId], references: [id])
  items             OrderItem[]
  createdAt         DateTime  @default(now())
}

model OrderItem {
  id                Int       @id @default(autoincrement())
  quantity          Int
  price             Float
  productId         Int
  product           Product   @relation(fields: [productId], references: [id])
  orderId           Int
  order             Order     @relation(fields: [orderId], references: [id])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email], name: "email_index")
}

model Address {
  id          Int      @id @default(autoincrement())
  road        String
  number      String
  neighborhood String
  city        String
  state       String
  cep         String
  complement  String?
  userId   Int
  user     User  @relation(fields: [userId], references: [id])

  @@index([userId], name: "user_idx")
}